import streamlit as st
import mlflow
import requests
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import pandas as pd

# Configuration de la page Streamlit
st.set_page_config(page_title="Entra√Ænement sur le dataset Diabetes", page_icon="üìä", layout="wide")

# Titre et description
st.title("üìä Entra√Ænement sur le dataset Diabetes avec MLflow et Airflow")
st.write("""
Cette application permet d'entra√Æner un mod√®le de r√©gression sur le dataset Diabetes et de suivre l'exp√©rimentation avec MLflow.
Vous pouvez soit entra√Æner le mod√®le directement, soit d√©clencher un DAG Airflow pour orchestrer l'entra√Ænement.
""")

# Charger le dataset
diabetes = load_diabetes()
df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
df['target'] = diabetes.target

# Afficher un aper√ßu du dataset
st.subheader("Aper√ßu du dataset Diabetes")
st.dataframe(df.head())

# Afficher des statistiques descriptives
st.subheader("Statistiques descriptives")
st.write(df.describe())

# Afficher un graphique de distribution de la cible
st.subheader("Distribution de la cible (Diab√®tes progression)")
fig, ax = plt.subplots()
ax.hist(df['target'], bins=30, color='skyblue', edgecolor='black')
ax.set_xlabel("Diab√®tes progression")
ax.set_ylabel("Fr√©quence")
st.pyplot(fig)

# Bouton pour entra√Æner directement le mod√®le
st.subheader("Entra√Ænement direct du mod√®le")
if st.button("üöÄ Entra√Æner directement le mod√®le"):
    with st.spinner("Chargement du dataset et entra√Ænement du mod√®le..."):
        # Split des donn√©es
        X_train, X_test, y_train, y_test = train_test_split(
            diabetes.data, diabetes.target, test_size=0.2, random_state=42
        )
        
        # Configurer et d√©marrer l'exp√©rience MLflow
        mlflow.set_experiment("diabetes_regression")
        with mlflow.start_run():
            model = LinearRegression()
            model.fit(X_train, y_train)
            score = model.score(X_test, y_test)
            
            # Enregistrer les param√®tres et m√©triques dans MLflow
            mlflow.log_param("model", "LinearRegression")
            mlflow.log_metric("score", score)
            
            st.success(f"‚úÖ Entra√Ænement termin√© ! Score du mod√®le : {score:.3f}")
            st.write("Les param√®tres et m√©triques ont √©t√© enregistr√©s dans MLflow.")

# Bouton pour d√©clencher le DAG Airflow
if st.button("D√©clencher l'ex√©cution du DAG Airflow"):
    st.info("Tentative de d√©clenchement du DAG Airflow...")
    # URL de l'API REST d'Airflow pour lancer un DAG (ici 'diabetes_training')
    airflow_url = "http://airflow-webserver:8080/api/v1/dags/diabetes_training/dagRuns"
    try:
        response = requests.post(
            airflow_url,
            json={"conf": {}},
            auth=("admin", "admin"),  # Ajout de l'authentification basique
            headers={"Content-Type": "application/json"}
        )
        if response.status_code in [200, 201]:
            st.success("Le DAG Airflow a √©t√© d√©clench√© avec succ√®s !")
        else:
            st.error(f"Erreur lors du d√©clenchement du DAG Airflow : {response.text}")
    except Exception as e:
        st.error(f"Erreur de connexion √† Airflow : {e}")